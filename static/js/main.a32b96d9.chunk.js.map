{"version":3,"sources":["components/Profile/profile.module.css","components/Statistics/statistics.module.css","components/FriendsList/friends.module.css","serviceWorker.js","components/Profile/Profile.js","components/Statistics/Statistics.js","components/FriendsList/FriendsList.js","components/Transactions/Transactions.js","components/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Profile","props","className","styles","profile","description","src","avatar","alt","name","tag","stats","profileLi","label","quantity","followers","views","likes","defaultProps","Statistics","statistics","title","statList","data","map","el","key","id","Li","bgColor","Math","random","style","backgroundColor","item","percentage","Friend","isOnline","online","status","width","FriendList","friendList","TransactionRow","type","amount","currency","Transaction","App","user","friends","transactions","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a32b96d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__38jCY\",\"description\":\"profile_description__2llVQ\",\"avatar\":\"profile_avatar__1-o32\",\"name\":\"profile_name__RoiMb\",\"tag\":\"profile_tag__2xtJ8\",\"location\":\"profile_location__3Tcrp\",\"stats\":\"profile_stats__zCgYj\",\"label\":\"profile_label__1SzVc\",\"quantity\":\"profile_quantity__3iDb1\",\"profileLi\":\"profile_profileLi__1IWq0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"statistics_statistics__b0FAJ\",\"statList\":\"statistics_statList__10F_C\",\"item\":\"statistics_item__2Wjea\",\"title\":\"statistics_title__lj0EP\",\"label\":\"statistics_label__28BDY\",\"percentage\":\"statistics_percentage__orPn1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendList\":\"friends_friendList__166xh\",\"item\":\"friends_item__2jyA0\",\"status\":\"friends_status__3pZtb\",\"avatar\":\"friends_avatar__3RrPB\",\"name\":\"friends_name__2hqsi\",\"online\":\"friends_online__1dB7C\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport styles from \"./profile.module.css\";\n\nimport PropTypes from \"prop-types\";\n\nexport const Profile = (props) => {\n  return (\n    <div className={styles.profile}>\n      <div className={styles.description}>\n        <img src={props.avatar} alt=\"user avatar\" className={styles.avatar} />\n        <p className={styles.name}>{props.name}</p>\n        <p className={styles.tag}>@{props.tag}</p>\n        <p className={styles.location}>{props.location}</p>\n      </div>\n\n      <ul className={styles.stats}>\n        <li className={styles.profileLi}>\n          <span className={styles.label}>Followers</span>\n          <span className={styles.quantity}>{props.stats.followers}</span>\n        </li>\n        <li className={styles.profileLi}>\n          <span className={styles.label}>Views</span>\n          <span className={styles.quantity}>{props.stats.views}</span>\n        </li>\n        <li className={styles.profileLi}>\n          <span className={styles.label}>Likes</span>\n          <span className={styles.quantity}>{props.stats.likes}</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nProfile.propTypes = {\n  avatar: PropTypes.string,\n  name: PropTypes.string,\n  tag: PropTypes.string,\n  location: PropTypes.string,\n  stats: PropTypes.objectOf(PropTypes.number),\n};\n\nProfile.defaultProps = {\n  name: \"Vladyslav Shynder\",\n  tag: \"vshynder\",\n  location: \"Kyiv, Ukraine\",\n  stats: {\n    followers: 0,\n    views: 0,\n    likes: 0,\n  },\n};\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport styles from \"./statistics.module.css\";\n\nexport const Statistics = (props) => {\n  return (\n    <section className={styles.statistics}>\n      <h2 className={styles.title}>{props.title}</h2>\n\n      <ul className={styles.statList}>\n        {props.data.map((el) => (\n          <Li key={el.id} data={el} />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nconst Li = ({ data }) => {\n  const bgColor = \"rgb(\" + getRandomColor() + \")\";\n  return (\n    <li style={{ backgroundColor: bgColor }} className={styles.item}>\n      <span className={styles.label}>{data.label}</span>\n      <span className={styles.percentage}>{data.percentage}%</span>\n    </li>\n  );\n};\n\nStatistics.propTypes = {\n  title: PropTypes.string,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      percentage: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nfunction getRandomColor() {\n  return `${(Math.random() * 255) | 0},${(Math.random() * 255) | 0},${\n    (Math.random() * 255) | 0\n  }`;\n}\n","import React from \"react\";\nimport styles from \"./friends.module.css\";\n\nconst Friend = ({ data }) => {\n  return (\n    <li className={styles.item}>\n      <span className={data.isOnline ? styles.online : styles.status}>\n        {data.isOnline}\n      </span>\n      <img className={styles.avatar} src={data.avatar} alt=\"\" width=\"48\" />\n      <p className={styles.name}>{data.name}</p>\n    </li>\n  );\n};\n\nexport const FriendList = (props) => {\n  return (\n    <ul className={styles.friendList}>\n      {props.data.map((el) => (\n        <Friend key={el.id} data={el} />\n      ))}\n    </ul>\n  );\n};\n","import React from \"react\";\nimport \"./transactions.css\";\n\nimport PropTypes from \"prop-types\";\n\nconst TransactionRow = ({ type, amount, currency }) => {\n  return (\n    <tr>\n      <td className=\"transaction\">{type}</td>\n      <td className=\"transaction\">{amount}</td>\n      <td className=\"transaction\">{currency}</td>\n    </tr>\n  );\n};\n\nexport const Transaction = (props) => {\n  return (\n    <table className=\"transaction-history\">\n      <thead>\n        <tr>\n          <th className=\"names\">Type</th>\n          <th className=\"names\">Amount</th>\n          <th className=\"names\">Currency</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.data.map((el) => (\n          <TransactionRow\n            key={el.id}\n            type={el.type}\n            amount={el.amount}\n            currency={el.currency}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransaction.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import React from \"react\";\nimport { Profile } from \"./Profile/Profile\";\nimport { Statistics } from \"./Statistics/Statistics\";\nimport { FriendList } from \"./FriendsList/FriendsList\";\nimport { Transaction } from \"./Transactions/Transactions\";\nimport user from \"./Profile/user.json\";\nimport statistics from \"./Statistics/statistical-data.json\";\nimport friends from \"./FriendsList/friends.json\";\nimport transactions from \"./Transactions/transactions.json\";\n\nexport const App = () => {\n  return (\n    <div>\n      <Profile\n        name={user.name}\n        tag={user.tag}\n        location={user.location}\n        avatar={user.avatar}\n        stats={user.stats}\n      />\n      <Statistics title=\"Upload stats\" data={statistics} />\n      <FriendList data={friends} />\n      <Transaction data={transactions} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\nimport { App } from \"./components/index.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}